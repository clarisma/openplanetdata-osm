name: Build & Publish CRCP Snapshots

on:
  schedule:
    - cron: '0 1 * * *'   # daily 01:00 UTC
  workflow_dispatch:
  workflow_run:
    workflows: [ "Build & Publish GOL Snapshots" ]
    types: [ completed ]

jobs:
  build:
    runs-on: openplanetdata-hetzner-ccx43
    env:
      REMOTE_NAME: openplanetdata-r2
    steps:
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 21
          
      - name: Install gol
        run: |
          set -euo pipefail

          tmp=$(mktemp -d)
          url=$(curl -sSL https://api.github.com/repos/clarisma/gol-tool/releases/latest \
                  | grep -oP '"browser_download_url":\s*"\K[^"]+gol-tool-[^"]+\.zip')
          curl -L "$url" -o "$tmp/gol.zip"

          # unpack under /opt
          sudo unzip -q "$tmp/gol.zip" -d /opt

          # /opt/gol-tool → /opt/gol-tool-<version>
          latest=$(ls -d /opt/gol-tool-* | sort -V | tail -n1)
          sudo ln -sfn "$latest" /opt/gol-tool

          # tiny wrapper on PATH
          sudo tee /usr/local/bin/gol >/dev/null <<'EOF'
          #!/usr/bin/env bash
          exec /opt/gol-tool/bin/gol "$@"
          EOF
          sudo chmod +x /usr/local/bin/gol

          gol --version

      - name: Install rclone
        env:
          RCLONE_CONFIG_DATA: ${{ secrets.RCLONE_CONFIG_DATA }}
        run: |
          mkdir -p ~/.config/rclone
          printf '%s' "$RCLONE_CONFIG_DATA" > ~/.config/rclone/rclone.conf
          command -v rclone >/dev/null || curl https://rclone.org/install.sh | sudo bash

      - name: Download latest published GOL
        run: |
          time rclone copy \
            --http-url https://download.openplanetdata.com :http:osm/planet/gol/planet-latest.osm.gol . \
            --multi-thread-cutoff 0 \
            --multi-thread-streams 64 \
            --multi-thread-chunk-size 512M \
            --transfers 1 --progress
          mv planet-latest.osm.gol "planet-${{ steps.date.outputs.tag }}.osm.gol"

      - name: Extract CRCP features
        run: |
          time gol query planet-latest.osm.gol "a['ISO3166-1:alpha2']" -t=ISO3166-1:alpha2 -f=geojson > countries.geojson
          time gol query planet-latest.osm.gol "a['ISO3166-2']" -t=ISO3166-2 -f=geojson > regions.geojson
          time gol query planet-latest.osm.gol "n['place'='city', 'town', 'village'][population>10]" -t=lat,lon,name,name:en -f=geojson > cities.geojson
          time gol query planet-latest.osm.gol "[addr:postcode]" -t=lat,lon,addr:postcode -f=geojson > postalcodes.geojson

      # ── convert ALL GeoJSON → GeoParquet ────────────────────────────────
      - name: Convert GeoJSON → GeoParquet
        run: |
          docker run --rm -v "$PWD":/data ghcr.io/osgeo/gdal:ubuntu-full-3.11.0 bash -c '
            set -euo pipefail
            for f in /data/*.geojson; do
              base=$(basename "$f" .geojson)
              ogr2ogr -f Parquet "/data/${base}-latest.osm.geoparquet" "$f" \
                      -lco GEOMETRY_ENCODING=WKB
            done
          '

      # ── SHA-256 + metadata for EVERY GeoParquet ─────────────────────────
      - name: SHA-256 and metadata
        run: |
          for p in *-latest.osm.geoparquet; do
            shasum -a 256 "$p" > "${p}.sha256"
            stat -c '%s %W %Z' "$p" | \
              awk '{print "{\"created\":"($2==0?$3:$2)",\"size\":"$1"}"}' \
              > "${p}.metadata"
          done

      # ── upload ALL artefacts to R2 ──────────────────────────────────────
      - name: Upload to R2
        env:
          RCLONE_CONFIG_DATA: ${{ secrets.RCLONE_CONFIG_DATA }}
        run: |
          for f in *-latest.osm.geoparquet *-latest.osm.geoparquet.{sha256,metadata}; do
            dataset="${f%%-latest*}"          # countries, regions, cities, postalcodes…
            rclone copyto "$f" \
              "$REMOTE_NAME:openplanetdata/osm/${dataset}/geoparquet/$f"
          done
