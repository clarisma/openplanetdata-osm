name: Build & Publish CRCP Snapshots

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Build & Publish GOL Snapshots"]
    types: [completed]

jobs:
  build:
    runs-on: openplanetdata-cortex
    env:
      REMOTE_NAME: openplanetdata-r2

    steps:
      - name: Install dependencies (skip if already present)
        shell: bash
        run: |
          need_install() { ! command -v "$1" >/dev/null 2>&1; }
          pkgs=()
          need_install unzip && pkgs+=(unzip)
          
          if ((${#pkgs[@]})); then
            sudo dnf -y install "${pkgs[@]}"
          else
            echo "All required packages already present."
          fi

      - name: Set up JDK
        uses: actions/setup-java@v5
        with:
          distribution: zulu
          java-version: 21

      - name: Install gol
        run: |
          set -euo pipefail
          
          # download latest release ZIP
          tmp=$(mktemp -d)
          url=$(curl -sSL https://api.github.com/repos/clarisma/gol-tool/releases/latest \
                  | grep -oP '"browser_download_url":\s*"\K[^"]+gol-tool-[^"]+\.zip')
          curl -L "$url" -o "$tmp/gol.zip"
          
          # unpack under ~/.local/opt/gol-tool-<ver> and create stable symlinks
          prefix="$HOME/.local/opt"
          mkdir -p "$prefix"
          unzip -q -o "$tmp/gol.zip" -d "$prefix"
          latest=$(ls -d "$prefix"/gol-tool-* | sort -V | tail -n1)
          ln -sfn "$latest" "$prefix/gol-tool"
          
          # add tiny wrapper to ~/.local/bin and expose PATH to later steps
          mkdir -p "$HOME/.local/bin"
          ln -sfn "$prefix/gol-tool/bin/gol" "$HOME/.local/bin/gol"
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          
          gol --version

      - name: Install rclone (skip if already present)
        env:
          RCLONE_CONFIG_DATA: ${{ secrets.RCLONE_CONFIG_DATA }}
        run: |
          mkdir -p ~/.config/rclone
          printf '%s' "$RCLONE_CONFIG_DATA" > ~/.config/rclone/rclone.conf
          command -v rclone >/dev/null || curl https://rclone.org/install.sh | sudo bash

      - name: Download latest published GOL
        run: |
          time rclone copy \
            --http-url https://download.openplanetdata.com :http:osm/planet/gol/planet-latest.osm.gol . \
            --multi-thread-cutoff 0 \
            --multi-thread-streams 128 \
            --multi-thread-chunk-size 512M \
            --transfers 1 --progress

      - name: Extract CRCP features
        run: |
          time gol query planet-latest.osm.gol "a['ISO3166-1:alpha2']" -t=ISO3166-1:alpha2 -f=geojson > countries.geojson
          time gol query planet-latest.osm.gol "a['ISO3166-2']" -t=ISO3166-2 -f=geojson > regions.geojson
          time gol query planet-latest.osm.gol "n['place'='city', 'town', 'village'][population>10]" -t=lat,lon,name,name:en -f=geojson > cities.geojson
          time gol query planet-latest.osm.gol "n[addr:postcode]" -t=lat,lon,addr:postcode -f=geojson > postalcodes.geojson

      - name: Convert GeoJSON → GeoParquet
        run: |
          docker run --rm -v "$PWD":/data ghcr.io/osgeo/gdal:ubuntu-full-3.11.0 bash -c '
            set -euo pipefail
            for f in /data/*.geojson; do
              base=$(basename "$f" .geojson)
              ogr2ogr -f Parquet "/data/${base}-latest.osm.geoparquet" "$f" \
                      -lco GEOMETRY_ENCODING=WKB -lco COMPRESSION=ZSTD
            done
          '

      - name: SHA‑256 and metadata
        run: |
          for p in *-latest.osm.geoparquet; do
            sha256sum "$p" > "${p}.sha256"
            stat -c '%s %W %Z' "$p" | \
              awk '{print "{\"created\":"($2==0?$3:$2)",\"size\":"$1"}"}' \
              > "${p}.metadata"
          done

      - name: Upload to R2
        env:
          RCLONE_CONFIG_DATA: ${{ secrets.RCLONE_CONFIG_DATA }}
        run: |
          for f in *-latest.osm.geoparquet *-latest.osm.geoparquet.{sha256,metadata}; do
            dataset="${f%%-latest*}"          # countries, regions, cities, postalcodes …
            rclone copyto --progress --stats=60s --stats-one-line-date "$f" \
              "$REMOTE_NAME:openplanetdata/osm/${dataset}/geoparquet/$f"
          done

      - name: Cleanup downloaded and generated files
        if: always()
        run: |
          rm -f planet-latest.osm.gol
          rm -f *.geojson
          rm -f *-latest.osm.geoparquet *-latest.osm.geoparquet.{sha256,metadata}
          find /tmp -name "tmp.*" -user "$USER" -delete 2>/dev/null || true
