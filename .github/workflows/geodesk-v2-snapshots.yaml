name: Build & Publish GeoDesk v2 Snapshots

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Build & Publish PBF Snapshots"]
    types: [completed]
    branches: [main]

jobs:
  gol:
    runs-on: openplanetdata-cortex

    outputs:
      tag: ${{ steps.date.outputs.tag }}

    steps:
      - name: Set date tag
        id: date
        uses: openplanetdata/actions/set-date-tag@main

      - name: Install GOL 2.x
        uses: openplanetdata/actions/install-gol@main
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          version: 2

      - name: Download latest published PBF
        uses: openplanetdata/actions/download@main
        with:
          remote_path: osm/planet/pbf/planet-latest.osm.pbf

      - name: Rename downloaded PBF and cleanup working directory
        run: |
          rm -rf *.osm-work
          mv planet-latest.osm.pbf "planet-${{ steps.date.outputs.tag }}.osm.pbf"

      - name: Debug runner env (cgroups, swap, sysctl, io)
        shell: bash
        run: |
          set -euxo pipefail
      
          echo "## cgroup path"
          cat /proc/self/cgroup || true
          CG=$(sed -n 's/0:://p' /proc/self/cgroup || true)
          echo "CG=$CG"
      
          echo "## cgroup memory limits"
          for f in memory.current memory.max memory.high memory.swap.current memory.swap.max memory.stat; do
            printf "%-22s " "$f"; cat /sys/fs/cgroup/$CG/$f 2>/dev/null || echo "(n/a)"
          done
      
          echo "## cgroup cpu/io limits"
          for f in cpu.max cpu.weight io.max io.weight pids.max cpuset.cpus.effective cpuset.mems.effective; do
            printf "%-22s " "$f"; cat /sys/fs/cgroup/$CG/$f 2>/dev/null || echo "(n/a)"
          done
      
          echo "## ulimit"
          ulimit -a
      
          echo "## kernel vm settings"
          sysctl vm.swappiness vm.overcommit_memory vm.overcommit_ratio || true
          grep -H . /sys/kernel/mm/transparent_hugepage/enabled || true
          grep -H . /sys/kernel/mm/transparent_hugepage/defrag || true
      
          echo "## swap + zram"
          cat /proc/swaps || true
          lsblk -o NAME,TYPE,SIZE,MOUNTPOINT | sed '1,1!b' || true
      
          echo "## filesystem for workspace"
          findmnt -no SOURCE,FSTYPE,OPTIONS "$GITHUB_WORKSPACE" || true
      
          echo "## quick vmstat snapshot (3s)"
          vmstat 1 3 || true

      - name: Build GOL variant
        run: |
          g="planet-${{ steps.date.outputs.tag }}.osm.gol"
          p="planet-${{ steps.date.outputs.tag }}.osm.pbf"

          # Set temp directory to current working directory
          export TMPDIR="$PWD/.tmp"
          mkdir -p "$TMPDIR"

          echo "Starting build at $(date -u +%Y-%m-%d_%H:%M:%S)"
          echo "Using TMPDIR: $TMPDIR"

          gol -V
          sudo swapoff -a
          time gol build -s --yes "$g" "$p"
          sudo swapon -a
  
          echo "Build finished at $(date -u +%Y-%m-%d_%H:%M:%S)"
          ls -alh "$g"

      - name: Create metadata
        id: create_meta
        uses: openplanetdata/actions/create-metadata@main
        with:
          file: planet-${{ steps.date.outputs.tag }}.osm.gol
          remote_filename: planet-latest.osm.gol
          remote_path: /osm/planet/gol
          remote_version: 2
          tags: |
            geodesk
            gol
            openstreetmap
            public

      - name: Build GOB
        if: false # TODO: remove this line once GOL 2.1 is released
        run: |
          gol="planet-${{ steps.date.outputs.tag }}.osm.gol"
          gob="planet-${{ steps.date.outputs.tag }}.pbf.gob"
          time gol save "$gol" "$gob"
          ls -alh

      - name: Upload GOL to R2
        uses: openplanetdata/actions/upload@main
        env:
          RCLONE_CONFIG_DATA: ${{ secrets.RCLONE_CONFIG_DATA }}
        with:
          file: planet-${{ steps.date.outputs.tag }}.osm.gol
          remote_filename: planet-latest.osm.gol
          remote_path: /osm/planet/gol
          remote_version: 2

      - name: Create GOB metadata
        if: false # TODO: enable with GOL >= 2.1
        id: create_meta_gob
        uses: openplanetdata/actions/create-metadata@main
        with:
          file: planet-${{ steps.date.outputs.tag }}.pbf.gob
          remote_filename: planet-latest.pbf.gob
          remote_path: /osm/planet/gob
          remote_version: 2
          tags: |
            geodesk
            gob
            gol
            openstreetmap
            public

      - name: Upload GOB to R2
        if: false # TODO: enable with GOL >= 2.1
        uses: openplanetdata/actions/upload@main
        env:
          RCLONE_CONFIG_DATA: ${{ secrets.RCLONE_CONFIG_DATA }}
        with:
          file: planet-${{ steps.date.outputs.tag }}.pbf.gob
          remote_filename: planet-latest.pbf.gob
          remote_path: /osm/planet/gob
          remote_version: 2

      - name: Cleanup downloaded and generated files
        if: always()
        run: |
          rm -f planet-*.osm.gob planet-*.osm.gol planet-*.osm.pbf planet-*.osm.gob.{sha256,metadata} planet-*.osm.gol.{sha256,metadata}
          find /tmp -name "tmp.*" -user "$USER" -delete 2>/dev/null || true
