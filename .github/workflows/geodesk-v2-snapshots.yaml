name: Build & Publish GeoDesk v2 Snapshots

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Build & Publish PBF Snapshots"]
    types: [completed]

env:
  REMOTE_NAME: openplanetdata-r2

jobs:
  gol:
    runs-on: openplanetdata-cortex

    outputs:
      tag: ${{ steps.date.outputs.tag }}

    steps:
      - name: Set date tag
        id: date
        run: echo "tag=$(date '+%Y%m%d')" >>"$GITHUB_OUTPUT"

      - name: Install dependencies (skip if already present)
        shell: bash
        run: |
          need_install() { ! command -v "$1" >/dev/null 2>&1; }
          
          pkgs=()
          need_install unzip && pkgs+=(unzip)
          need_install jq && pkgs+=(jq)
          
          if ((${#pkgs[@]})); then
            sudo dnf -y install "${pkgs[@]}"
          else
            echo "All required packages already present."
          fi

      - name: Install latest gol 2.x
        run: |
          set -euo pipefail
      
          # download latest 2.x release ZIP (for Linux)
          tmp=$(mktemp -d)
          releases=$(curl -sSL 'https://api.github.com/repos/clarisma/geodesk-gol/releases?per_page=100')
          url=$(jq -r '[.[]
              | select(.draft==false and .prerelease==false and (.tag_name|tostring|ltrimstr("v")|startswith("2.")))
            ][0]
            .assets[]
            | select(.name | test("geodesk-gol-.*-linux\\.zip$"))
            | .browser_download_url' <<<"$releases" | head -n1)
          if [[ -z "${url:-}" || "$url" == null ]]; then
            echo "Failed to locate gol 2.x release asset URL" >&2
            exit 1
          fi
          curl -L "$url" -o "$tmp/gol.zip"
      
          # unpack under ~/.local/opt
          prefix="$HOME/.local/opt"
          mkdir -p "$prefix"
          unzip -q -o "$tmp/gol.zip" -d "$prefix"
      
          # add tiny wrapper to ~/.local/bin and expose PATH to later steps
          mkdir -p "$HOME/.local/bin"
          ln -sfn "$prefix/gol" "$HOME/.local/bin/gol"
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
      
          gol --version

      - name: Install rclone (skip if already present)
        env:
          RCLONE_CONFIG_DATA: ${{ secrets.RCLONE_CONFIG_DATA }}
        run: |
          mkdir -p ~/.config/rclone
          printf '%s' "$RCLONE_CONFIG_DATA" > ~/.config/rclone/rclone.conf
          command -v rclone >/dev/null || curl https://rclone.org/install.sh | sudo bash

      - name: Download latest published PBF
        run: |
          time rclone copy \
            --http-url https://download.openplanetdata.com :http:osm/planet/pbf/planet-latest.osm.pbf . \
            --multi-thread-cutoff 0 \
            --multi-thread-streams 128 \
            --multi-thread-chunk-size 512M \
            --transfers 1 --progress
          mv planet-latest.osm.pbf "planet-${{ steps.date.outputs.tag }}.osm.pbf"

      - name: Build GOL variant
        run: |
          g="planet-${{ steps.date.outputs.tag }}.osm.gol"
          p="planet-${{ steps.date.outputs.tag }}.osm.pbf"
          time gol build "$g" "$p"
          sha256sum "$g" >"$g.sha256"
          stat -c '%s %W %Z' "$g" | \
            awk '{print "{\"created\":"($2==0?$3:$2)",\"size\":"$1"}"}' >"$g.metadata"

      - name: Build GOB
        if: false # TODO: remove this line once GOL 2.1 is released
        run: |
          gol="planet-${{ steps.date.outputs.tag }}.osm.gol"
          gob="planet-${{ steps.date.outputs.tag }}.pbf.gob"
          time gol save "$gol" "$gob"
          sha256sum "$gob" >"$gob.sha256"
          stat -c '%s %W %Z' "$gob" | \
            awk '{print "{\"created\":"($2==0?$3:$2)",\"size\":"$1"}"}' >"$gob.metadata"

      - name: Upload GOL files to R2
        env:
          RCLONE_CONFIG_DATA: ${{ secrets.RCLONE_CONFIG_DATA }}
        run: |
          date=${{ steps.date.outputs.tag }}
          rclone copyto --progress --stats=60s --stats-one-line-date "planet-$date.osm.gol" "$REMOTE_NAME:openplanetdata/osm/planet/gol/v2/planet-latest.osm.gol"
          rclone copyto "planet-$date.osm.gol.metadata" "$REMOTE_NAME:openplanetdata/osm/planet/gol/v2/planet-latest.osm.gol.metadata"
          rclone copyto "planet-$date.osm.gol.sha256" "$REMOTE_NAME:openplanetdata/osm/planet/gol/v2/planet-latest.osm.gol.sha256"
          # TODO: add .gob upload

      - name: Cleanup downloaded and generated files
        if: always()
        run: |
          # TODO: delete GOB
          rm -f planet-*.osm.pbf planet-*.osm.gol planet-*.osm.gol.{sha256,metadata}
          find /tmp -name "tmp.*" -user "$USER" -delete 2>/dev/null || true
