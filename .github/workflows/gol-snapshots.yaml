name: Build & Publish GOL Snapshots

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Build & Publish PBF Snapshots"]
    types: [completed]

env:
  REMOTE_NAME: openplanetdata-r2

jobs:
  gol:
    runs-on: openplanetdata-cortex

    outputs:
      tag: ${{ steps.date.outputs.tag }}

    steps:
      - name: Set date tag
        id: date
        run: echo "tag=$(date '+%Y%m%d')" >>"$GITHUB_OUTPUT"

      - name: Install dependencies (skip if already present)
        shell: bash
        run: |
          need_install() { ! command -v "$1" >/dev/null 2>&1; }
          
          pkgs=()
          need_install unzip && pkgs+=(unzip)
          
          if ((${#pkgs[@]})); then
            sudo dnf -y install "${pkgs[@]}"
          else
            echo "All required packages already present."
          fi

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 21

      - name: Install gol
        run: |
          set -euo pipefail
      
          # download latest release ZIP
          tmp=$(mktemp -d)
          url=$(curl -sSL https://api.github.com/repos/clarisma/gol-tool/releases/latest \
                  | grep -oP '"browser_download_url":\s*"\K[^"]+gol-tool-[^"]+\.zip')
          curl -L "$url" -o "$tmp/gol.zip"
      
          # unpack under ~/.local/opt/gol-tool-<ver> and create stable symlinks
          prefix="$HOME/.local/opt"
          mkdir -p "$prefix"
          unzip -q -o "$tmp/gol.zip" -d "$prefix"
          latest=$(ls -d "$prefix"/gol-tool-* | sort -V | tail -n1)
          ln -sfn "$latest" "$prefix/gol-tool"
      
          # add tiny wrapper to ~/.local/bin and expose PATH to later steps
          mkdir -p "$HOME/.local/bin"
          ln -sfn "$prefix/gol-tool/bin/gol" "$HOME/.local/bin/gol"
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
      
          gol --version

      - name: Install rclone (skip if already present)
        env:
          RCLONE_CONFIG_DATA: ${{ secrets.RCLONE_CONFIG_DATA }}
        run: |
          mkdir -p ~/.config/rclone
          printf '%s' "$RCLONE_CONFIG_DATA" > ~/.config/rclone/rclone.conf
          command -v rclone >/dev/null || curl https://rclone.org/install.sh | sudo bash

      - name: Download latest published PBF
        run: |
          time rclone copy \
            --http-url https://download.openplanetdata.com :http:osm/planet/pbf/planet-latest.osm.pbf . \
            --multi-thread-cutoff 0 \
            --multi-thread-streams 128 \
            --multi-thread-chunk-size 512M \
            --transfers 1 --progress
          mv planet-latest.osm.pbf "planet-${{ steps.date.outputs.tag }}.osm.pbf"

      - name: Build GOL variant
        run: |
          g="planet-${{ steps.date.outputs.tag }}.osm.gol"
          p="planet-${{ steps.date.outputs.tag }}.osm.pbf"
          time gol build --tag-duplicate-nodes=yes "$g" "$p"
          sha256sum "$g" >"$g.sha256"
          stat -c '%s %W %Z' "$g" | \
            awk '{print "{\"created\":"($2==0?$3:$2)",\"size\":"$1"}"}' >"$g.metadata"

      - name: Upload GOL files to R2
        env:
          RCLONE_CONFIG_DATA: ${{ secrets.RCLONE_CONFIG_DATA }}
        run: |
          date=${{ steps.date.outputs.tag }}
          rclone copyto "planet-$date.osm.gol"          "$REMOTE_NAME:openplanetdata/osm/planet/gol/planet-latest.osm.gol"
          rclone copyto "planet-$date.osm.gol.metadata" "$REMOTE_NAME:openplanetdata/osm/planet/gol/planet-latest.osm.gol.metadata"
          rclone copyto "planet-$date.osm.gol.sha256"   "$REMOTE_NAME:openplanetdata/osm/planet/gol/planet-latest.osm.gol.sha256"

      - name: Cleanup downloaded and generated files
        if: always()
        run: |
          rm -f planet-*.osm.pbf planet-*.osm.gol planet-*.osm.gol.{sha256,metadata}
          find /tmp -name "tmp.*" -user "$USER" -delete 2>/dev/null || true
